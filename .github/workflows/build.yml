name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 3. REDIS, JWT, AES secrets를 환경 변수로 등록
      - name: Set up secrets as env variables
        run: |
          echo "INFLUX_URL=${{ secrets.INFLUX_URL }}" >> $GITHUB_ENV
          echo "INFLUX_TOKEN=${{ secrets.INFLUX_TOKEN }}" >> $GITHUB_ENV
          echo "INFLUX_ORG=${{ secrets.INFLUX_ORG }}" >> $GITHUB_ENV
          echo "INFLUX_BUCKET=${{ secrets.INFLUX_BUCKET }}" >> $GITHUB_ENV
          echo "BROKER_ADDRESS=${{ secrets.BROKER_ADDRESS }}" >> $GITHUB_ENV
          echo "BROKER_CLIENT_ID=${{ secrets.BROKER_CLIENT_ID }}" >> $GITHUB_ENV

      # 5. 테스트 생략하고 빌드
      - name: Package without tests
        run: mvn clean package -Dmaven.test.skip=true

      # 6. SCP를 통해 서버로 jar 파일 전송
      - name: Upload jar to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "target/*.jar"
          target: "~/"
          rm: false

      # 7. 원격 서버에서 스크립트 실행
      - name: Execute startup script on remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: startup/springIotDataHandler.sh